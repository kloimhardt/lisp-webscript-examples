(ns app\little-clojure\core)

(def mapv map)

(defn writefile[fname txt]
  (let [myfile (php/fopen fname "a")
        code (php/fwrite myfile (str txt "\n"))
        _ (php/fclose myfile)]
    txt))

(defn eprint [e]
  (writefile "klmlog.txt" (print-str e))
  e)

(defn into-set [coll]
  (let [empty (set)]
    (reduce push empty coll)))

(defn set-contains? [st el]
  (if (= (set) (intersection st (set el))) nil el))

(defn into-map [coll]
  (reduce (fn [m [k v]] (put m k v)) {} coll))

(defn assoc [m k v]
  (put m k v))

(defn dissoc [mp & ks]
  (reduce (fn[m k] (unset m k)) mp ks))

(defn name [kw]
  (php/substr (str kw) 1))

(defn atom [val]
  (let [a @{:atom-val val}] a))

(defn swap! [a fun]
  (let [val (fun (:atom-val a))]
    (put a :atom-val val)
    val))

(defn reset! [a val]
  (put a :atom-val val)
  val)

(defn doall [x] x)

(defn deref [a] (:atom-val a))

(defn atom? [a]
  (and (table? a) (:atom-val a)))

(defn read-edn [edn-string]
  (let [comma-outside-string "/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/"
        str1 (php/preg_replace comma-outside-string "" edn-string)
        phel-string
        (reduce (fn[s [a b]] (php/str_replace a b s))
                str1
                [["#uuid" ""] ["(" "["] [")" "]"]])]
    (php/-> (php/new \Phel\Compiler\CompilerFacade)
            (eval phel-string
                  (php/new \Phel\Compiler\Compiler\CompileOptions)))))

(defn write-edn [phel-data]
  (->> (print-str phel-data)
       (php/str_replace "@{" "{")
       (php/str_replace "@[" "[")))

(defn get-fn1 [f argsv]
  (let [af (if (atom? f) (deref f) f)]
    (if (and (hash-map? af) (= (into-set (keys af)) (set :dispatch-fn :fn-map)))
      (let [{:fn-map fn-map :dispatch-fn dispatch-fn} af
            dispatch-val (apply dispatch-fn argsv)]
        {:fun (get fn-map dispatch-val) :dispatch-val dispatch-val})
      {:fun f :dispatch-val nil})))

(defn get-fn [f & args]
  (:fun (get-fn1 f args)))

(defn dispatch [f & args]
  (let [{:fun fun :dispatch-val dispatch-val} (get-fn1 f args)]
    (if fun
      (apply fun args)
      (eprint (str "No method in multimethod for: " dispatch-val)))))

(defn remove-all-methods [mfun]
  (swap! mfun |(put $ :fn-map {})))

(defn defmethod [mfun dispatch-key fn]
  (swap! mfun (fn[m] (put-in m [:fn-map dispatch-key] fn))))

(defn defmulti [dispatch-fn]
  (atom {:dispatch-fn dispatch-fn
         :fn-map {}}))
