(ns app-tests\qlkit\core
  (:require app\qlkit\core :as ql)
  (:require app\little-clojure\core :as clj
            :refer [atom deref assoc dissoc swap! mapv reset!])
  (:require phel\test :refer [deftest is]))

(defn is-equal [a b]
  (is (= a b)))

(def read (clj/defmulti (fn [query-term env state] (first query-term))))

(def mutate (clj/defmulti (fn [a & args] (first a))))

(def remote (clj/defmulti (fn [a & args] (first a))))

(defn parse-with [fun query-term]
  (clj/remove-all-methods read)
  (clj/remove-all-methods mutate)
  (clj/remove-all-methods remote)
  (fun)
  (ql/parse-query-term query-term {}))

(deftest parse-query-test
  (reset! ql/mount-info {:parsers {:read   read
                                   :mutate mutate
                                   :remote remote}
                         :state {}})
  (is-equal (parse-with (fn []
                          (clj/defmethod read :foo
                                         (fn [query-term env state]
                                           42)))
                        [:foo])
            42)

  (let [x (atom 0)]
    (parse-with (fn []
                  (clj/defmethod mutate :bar!
                                 (fn [query-term env state]
                                   (swap! x inc))))
                [:bar!])
    (is-equal (deref x) 1))

  (is-equal (parse-with (fn [] nil)
                        [:foo])
            "No method in multimethod for: :foo")
  (is-equal
   (parse-with (fn []
                 (clj/defmethod read :animals
                                (fn [query-term env state]
                                  (for [animal-id :in (range 3)]
                                    (ql/parse-children query-term (assoc env :animal-id animal-id)))))
                 (clj/defmethod read :name
                                (fn [query-term env state]
                                  (get {0 :duck 1 :cat 2 :dog} (:animal-id env)))))
               [:animals {} [:name]])
   [{:name :duck} {:name :cat} {:name :dog}]))

(deftest mount-test
  (ql/mount {:state (atom 5)})
  (is-equal (deref (:state (deref ql/mount-info))) 5))
